/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Data;

using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data.IntrospectionService;
using OutSystems.RuntimeCommon;

namespace SnowflakeDatabaseProvider.Introspection
{

    /// <summary>
    /// Inspects a database server to retrieve information about its data model.
    /// </summary>
    public class SnowflakeIntrospectionService : BaseIntrospectionService
    {

        protected delegate SnowflakeDataTypeInfo CreateDataTypeInfo(string type, int length, int precision, int scale);

        protected delegate SnowflakeTableSourceColumnInfo CreateColumnInfo(ITableSourceInfo tableSource, string columnName,
            IDataTypeInfo dataType, bool isMandatory, bool isPrimaryKey, bool isAutoGenerated);


        /// <summary>
        /// Initializes a new instance of the <see cref="IntrospectionService"/> class.
        /// </summary>
        /// <param name="databaseServices">The database services.</param>
        public SnowflakeIntrospectionService(IDatabaseServices databaseServices) : base(databaseServices) { }

        /// <summary>
        /// Returns the list of databases that can be accessed from the current configuration. A database is a logical group of data objects (e.g. tables, views)
        /// that the plugin maps to a db-specific concept (e.g. SQL Server catalog or Oracle schema).
        /// </summary>
        /// <returns>List of available databases in the given server</returns>
        /// <exception cref="System.Data.Common.DbException">if an error occurs while accessing the database</exception>
        public override IEnumerable<IDatabaseInfo> ListDatabases()
        {
            List<IDatabaseInfo> result = new List<IDatabaseInfo>();

            using (IDbConnection conn = DatabaseServices.TransactionService.CreateConnection())
            {
                IDbCommand cmd = DatabaseServices.ExecutionService.CreateCommand(conn, "SHOW SCHEMAS");
                cmd.CommandTimeout = QueryTimeout;
                using (IDataReader reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        string dbName = (string)reader["database_name"];
                        string schemaName = (string)reader["name"];

                        result.Add(new SnowflakeDatabaseInfo(DatabaseServices, dbName + "." + schemaName));
                    }
                }
            }
            return result;
        }

        /// <summary>
        /// Returns a list of table sources (e.g. tables, views) that belong to a given database. 
        /// The returned table sources must have different display names.
        /// </summary>
        /// <param name="database">Database from which we want to fetch the list of tables</param>
        /// <param name="isTableSourceToIgnore">The delegate to call to see if the table source should be ignored and excluded from the returned list</param>
        /// <returns>List of available table sources in the given database</returns>
        /// <exception cref="System.Data.Common.DbException">if an error occurs while accessing the database</exception>
        public override IEnumerable<ITableSourceInfo> ListTableSources(IDatabaseInfo database, IsTableSourceToIgnore isTableSourceToIgnore)
        {
            SnowflakeDatabaseInfo databaseInfo = database as SnowflakeDatabaseInfo;
            if (databaseInfo == null)
            {
                return null;
            }

            IList<ITableSourceInfo> tables = new List<ITableSourceInfo>();

            using (IDbConnection conn = DatabaseServices.TransactionService.CreateConnection())
            {
                //Fetch Tables
                GetTableOrViewInfo(databaseInfo, isTableSourceToIgnore, true, conn, ref tables);

                //Fetch Views
                GetTableOrViewInfo(databaseInfo, isTableSourceToIgnore, false, conn, ref tables);
                
            }
            return tables;
        }

        private string GetQualifiedIdentifier(string schema, string tableName)
        {
            return string.Format("{0}.{1}", schema, tableName);
        }

        /// <summary>
        /// Returns the list of foreign keys of the table source (e.g. table, view)
        /// </summary>
        /// <param name="tableSource">Table source from which we want to fetch the list of foreign keys</param>        
        /// <returns>The list of foreign keys of the table</returns>
        /// <exception cref="System.Data.Common.DbException">if an error occurs while accessing the database</exception>
        public override IEnumerable<ITableSourceForeignKeyInfo> GetTableSourceForeignKeys(ITableSourceInfo tableSource)
        {
            #warning "Snowflake has support for FK's but I couldn't find a way to retrieve them"
            IList<ITableSourceForeignKeyInfo> foreignKeys = new List<ITableSourceForeignKeyInfo>();
            return foreignKeys;

        }

        /// <summary>
        /// Returns the list of columns of the table source (e.g. table, view)
        /// </summary>
        /// <param name="tableSource">Table source from which we want to fetch the list of columns</param>        
        /// <returns>The columns of the table</returns>
        /// <exception cref="System.Data.Common.DbException">if an error occurs while accessing the database</exception>
        public override IEnumerable<ITableSourceColumnInfo> GetTableSourceColumns(ITableSourceInfo tableSource)
        {
            var ts = tableSource as SnowflakeTableSourceInfo;
            return (ts == null) ? null : GetColumns(ts, GetDataTypeInfo, GetColumnInfo);
        }

        protected IEnumerable<ITableSourceColumnInfo> GetColumns(ITableSourceInfo tableSource, CreateDataTypeInfo createDataTypeInfo, CreateColumnInfo createColumnInfo)
        {
            string paramPrefix = DatabaseServices.ExecutionService.ParameterPrefix;
            var columnsInfo = new List<ITableSourceColumnInfo>();

            using (IDbConnection conn = DatabaseServices.TransactionService.CreateConnection())
            {
                string database;
                string schema;
                string table;

                SnowflakeDatabaseObjectFactory.ParseQualifiedTableName(tableSource.QualifiedName, out database, out schema, out table);

                string queryInfoSchema = string.Format("SELECT DISTINCT TABLE_NAME, COLUMN_NAME, DATA_TYPE, IS_NULLABLE, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, NUMERIC_SCALE, COLUMN_DEFAULT, ORDINAL_POSITION " +
                                             "FROM {0}.INFORMATION_SCHEMA.COLUMNS " +
                                             "WHERE TABLE_NAME = '{1}' " +
                                             "AND TABLE_SCHEMA = '{2}' " +
                                             "ORDER BY ORDINAL_POSITION;", database, table, schema);

                string queryInfoTable = string.Format("DESC TABLE {0}", tableSource.QualifiedName);

                IDbCommand cmdInfoSchema = DatabaseServices.ExecutionService.CreateCommand(conn, queryInfoSchema);
                IDbCommand cmdInfoTable = DatabaseServices.ExecutionService.CreateCommand(conn, queryInfoTable);
                cmdInfoSchema.CommandTimeout = QueryTimeout;
                cmdInfoTable.CommandTimeout = QueryTimeout;

                string pkField = null;
                using (IDataReader readerInfoTable = cmdInfoTable.ExecuteReader())
                {
                    while (pkField == null && readerInfoTable.Read())
                    {
                        string fieldName = (string)readerInfoTable["name"];
                        string pk = (string)readerInfoTable["primary key"];

                        if (pk == "Y")
                        {
                            pkField = fieldName;
                            break;
                        }
                    }
                }

                using (IDataReader readerInfoSchema = cmdInfoSchema.ExecuteReader())
                {
                    while (readerInfoSchema.Read())
                    {
                        string tableName = (string)readerInfoSchema["TABLE_NAME"];
                        string columnName = (string)readerInfoSchema["COLUMN_NAME"];

                        string type = (string)readerInfoSchema["DATA_TYPE"];

                        int length;

                        //longblobs and longtext might cause overflow so we need to protect the decoding
                        Int32.TryParse(Convert.ToString(readerInfoSchema["CHARACTER_MAXIMUM_LENGTH"]), out length);

                        int precision = readerInfoSchema["NUMERIC_PRECISION"] == DBNull.Value ? 0 : Convert.ToInt32(readerInfoSchema["NUMERIC_PRECISION"]);
                        int scale = readerInfoSchema["NUMERIC_SCALE"] == DBNull.Value ? 0 : Convert.ToInt32(readerInfoSchema["NUMERIC_SCALE"]);
                        IDataTypeInfo datatype = createDataTypeInfo(type, length, precision, scale);

                        bool isAutoGenerated = false;
                        bool isPrimaryKey = pkField != null && columnName.Equals(pkField);
                        bool isMandatory = isAutoGenerated || "NO".EqualsIgnoreCase((string)readerInfoSchema["IS_NULLABLE"]);

                        ITableSourceColumnInfo columnInfo = createColumnInfo(tableSource, columnName, datatype, isMandatory, isPrimaryKey, isAutoGenerated);
                        columnsInfo.Add(columnInfo);
                    }
                }
            }
            return columnsInfo;
        }

        private SnowflakeDataTypeInfo GetDataTypeInfo(string type, int length, int precision, int scale)
        {
            DBDataType dataType;
            int columnLength = 0, columnDecimals = 0;
            string typeCheck = type.ToLowerInvariant();

            switch (typeCheck)
            {
                case "number":
                case "bigint":
                    dataType = DBDataType.LONGINTEGER;
                    break;
                case "tinyint":
                case "smallint":
                case "int":
                case "integer":
                    dataType = DBDataType.INTEGER;
                    break;
                case "boolean":
                    dataType = DBDataType.BOOLEAN;
                    break;
                case "date":
                    dataType = DBDataType.DATE;
                    break;
                case "datetime":
                case "timestamp":
                case "timestamp_tz":
                case "timestamp_ltz":
                case "timestamp_ntz":
                    dataType = DBDataType.DATE_TIME;
                    break;
                case "time":
                    dataType = DBDataType.TIME;
                    break;
                case "char":
                case "character":
                case "varchar":
                case "text":
                case "string":
                    dataType = DBDataType.TEXT;
                    columnLength = Math.Min(int.MaxValue, length);
                    break;
                case "binary":
                case "varbinary":
                    dataType = DBDataType.BINARY_DATA;
                    break;
                case "decimal":
                case "float":
                case "float4":
                case "float8":
                case "numeric":
                case "double":
                    if (precision <= Constants.DecimalTotalPrecision)
                    {
                        dataType = DBDataType.DECIMAL;
                        columnLength = precision;
                        columnDecimals = scale;
                    }
                    else
                    {
                        dataType = DBDataType.TEXT;
                        columnLength = precision + 1;
                    }
                    break;
                default:
                    dataType = DBDataType.UNKNOWN;
                    break;
            }
            return new SnowflakeDataTypeInfo(dataType, type, columnLength, columnDecimals);
        }

        private static SnowflakeTableSourceColumnInfo GetColumnInfo(ITableSourceInfo tableSource, string columnName, IDataTypeInfo dataType, bool isMandatory, bool isPrimaryKey, bool isAutoGenerated)
        {
            return new SnowflakeTableSourceColumnInfo(tableSource, columnName, dataType, isMandatory, isPrimaryKey, isAutoGenerated);
        }

        private void GetTableOrViewInfo(SnowflakeDatabaseInfo databaseInfo, IsTableSourceToIgnore isTableSourceToIgnore, bool showTables, IDbConnection conn, ref IList<ITableSourceInfo> tables)
        {
            string sql = string.Format("SHOW {1} IN SCHEMA {0}", databaseInfo.Identifier, showTables ? "TABLES" : "VIEWS");

            IDbCommand cmd = DatabaseServices.ExecutionService.CreateCommand(conn, sql);
            cmd.CommandTimeout = QueryTimeout;

            using (IDataReader reader = cmd.ExecuteReader())
            {
                while (reader.Read())
                {
                    string tableName = (string)reader["name"];
                    if (!isTableSourceToIgnore(tableName))
                    {
                        string qualifiedTableName = GetQualifiedIdentifier(databaseInfo.Identifier, tableName);
                        tables.Add(new SnowflakeTableSourceInfo(DatabaseServices, databaseInfo, tableName, qualifiedTableName));
                    }
                }
            }
        }

    }
}