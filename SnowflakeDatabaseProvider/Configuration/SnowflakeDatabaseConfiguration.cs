/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;

namespace SnowflakeDatabaseProvider.Configuration {

    /// <summary>
    /// This class encapsulates a connection string and other configuration information required to connect to a database.
    /// </summary>
    public class SnowflakeDatabaseConfiguration : BaseDatabaseConfiguration
    {

        /// <summary>
        /// Gets the database provider. It provides information about the database,
        /// and access to its services.
        /// </summary>
        public override IDatabaseProvider DatabaseProvider {
            get { return SnowflakeDatabaseProvider.Instance; } 
        }

        /*
        This annotation defines how the configuration will be displayed in Service Center by using the following properties:
            - Label: Label of the form for this field
            - IsMandatory: Defines if the configuration field is mandatory
            - Order: The order within each region that the field will show up in the configuration form
            - Region: Form segment that groups related configuration fields
                 * DatabaseLocation: First region of the configuration form that defines the database you are going to integrate with.
                                     Common examples of fields in this region are: Server, Port and Schema.
                 * UserSpecific: Second region of the configuration form that defines authentication information required to connect.
                                 Common examples of fields are: Username and password
                 * AdminSpecific: Ignore for integration purposes
                 * Advanced: Ignore for integration purposes
         
        In order to better understand the annotations please compare the code of this sample with the configuration screen of a MySQL database connection
            http://localhost/ServiceCenter/DatabaseConnections_List.aspx
        */

        [UserDefinedConfigurationParameter(Label = "Server", IsMandatory = true, Order = 1, Region = ParameterRegion.DatabaseLocation, Prompt = "Server")]
        public string Server { get; set; }

        [UserDefinedConfigurationParameter(Label = "Account", IsMandatory = true, Order = 2, Region = ParameterRegion.DatabaseLocation, Prompt = "Account")]
        public string Account { get; set; }

        [UserDefinedConfigurationParameter(Label = "Warehouse", IsMandatory = true, Order = 3, Region = ParameterRegion.DatabaseLocation, Prompt = "Warehouse")]
        public string Warehouse { get; set; }

        [UserDefinedConfigurationParameter(Label = "Role", IsPassword = false, Order = 4, Region = ParameterRegion.UserSpecific, Prompt = "Role")]
        public string Role { get; set; }

        [UserDefinedConfigurationParameter(Label = "Username", IsMandatory = true, Order = 5, Region = ParameterRegion.UserSpecific, Prompt = "Username")]
        public string Username { get; set; }

        [UserDefinedConfigurationParameter(Label = "Password", IsPassword = true, Order = 6, Region = ParameterRegion.UserSpecific, Prompt = "Password")]
        public string Password { get; set; }

        private AdvancedConfiguration advancedConfiguration = new AdvancedConfiguration(
            "Insert configuration parameters separated by ';'. Username and Password will be inserted automatically if present. Example: Server=serverAddress1;Account=xpto.snowflakecomputing.com;Warehouse=MyWarehouse;Role=SYSADMIN",
            "Connection String Parameters",
            "[user Uid=$Username; Pwd=<hidden>;] $AdvancedConnectionStringField");

        /// <summary>
        /// This property represents the database identifier to be used in the configuration.
        /// </summary>
        /// <exception cref="System.NotImplementedException"></exception>
        public override string DatabaseIdentifier
        {
            get { return Account + "_" + Warehouse; }
        }

        /// <summary>
        /// This property represents the advanced configuration object
        /// </summary>
        public override AdvancedConfiguration AdvancedConfiguration
        {
            get { return advancedConfiguration; }
            set { advancedConfiguration = value; }
        }

        public override int GetHashCode()
        {
            return base.GetHashCode() ^ GetHashCodeBasedOnParts(Server, Account, Warehouse, Username, Role, Password);
        }

        /// <summary>
        /// Returns a basic connection string with attributes such as username and password.
        /// </summary>
        /// <returns></returns>
        protected override string AssembleBasicConnectionString()
        {
            return string.Format("Driver=SnowflakeDSIIDriver;Server={0};Account={1};Warehouse={2};Role={3};Uid={4};Pwd={5}", Server, Account,Warehouse, Role, Username, Password);
        }

        /// <summary>
        /// Returns an advanced connection string with attributes that might be specific for a particular database.
        /// </summary>
        /// <returns></returns>
        protected override string AssembleAdvancedConnectionString() {
            string result = "";
            if (string.IsNullOrEmpty(Username) == false)
            {
                result += string.Format("Uid={0};", Username);

                if (string.IsNullOrEmpty(Password) == false)
                {
                    result += string.Format("Pwd={0};", Password);
                }
            }
            result += AdvancedConfiguration.AdvancedConnectionStringField;
            return result;
        }

        /// <summary>
        /// Gets the runtime database configuration.
        /// </summary>
        /// <value>
        /// The runtime database configuration.
        /// </value>
        public override IRuntimeDatabaseConfiguration RuntimeDatabaseConfiguration
        {
            get
            {
                return new SnowflakeRuntimeDatabaseConfiguration
                {
                    ConnectionString = ConnectionString,
                    Server = Server,
                    Account = Account,
                    Warehouse = Warehouse,
                    Role = Role,
                    Username = Username

                };
            }
        }

        public override bool Equals(object obj)
        {
            var config = obj as SnowflakeDatabaseConfiguration;

            return config != null && base.Equals(obj) && Server == config.Server && Account == config.Account &&
                Warehouse == config.Warehouse && Role == config.Role && Username == config.Username && Password == config.Password && 
                ConnectionStringOverride == config.ConnectionStringOverride && AdvancedConfiguration == config.AdvancedConfiguration;
        }
    }
}
