/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Data.Common;
using System.Text;
using System.Linq;

using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.ExecutionService;
using OutSystems.RuntimeCommon.ObfuscationProperties;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.Log;

using Snowflake.Data.Client;

namespace SnowflakeDatabaseProvider.Execution {

    /// <summary>
    ///Base implementation of a database service that handles the execution of statements made while connected to a database.
    /// </summary>
    public class SnowflakeExecutionService : BaseExecutionService
    {
        private const int ConnectionError = -2146232009;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExecutionService"/> class.
        /// </summary>
        /// <param name="databaseServices">The database services to be used with this execution service.</param>
        public SnowflakeExecutionService(IDatabaseServices databaseServices) : base(databaseServices) { }

        /// <summary>
        /// Gets the prefix used to qualify command parameters (e.g. @)
        /// </summary>
        public override string ParameterPrefix
        {
            get { return "@"; }
        }

        /// <summary>
        /// Checks if an exception was raised due to a connection error.
        /// </summary>
        /// <param name="e">Exception raised.</param>
        /// <returns>
        /// True if the exception was due to a connection problem, False otherwise.
        /// </returns>
        public override bool IsConnectionException(DbException e)
        {
            var sqlE = e as SnowflakeDbException;
            return (sqlE != null) && sqlE.ErrorCode == ConnectionError;
        }

        public override void BulkInsert(DataTable tab) {
            using (var con = DatabaseServices.TransactionService.CreateConnection()) {
                string columns = "";
                string prepend = "";


                DbType[] dbTypes = new DbType[tab.Columns.Count];

                for (int i = 0; i < tab.Columns.Count; i++ ){
                    columns += prepend + DatabaseServices.DMLService.Identifiers.EscapeIdentifier(tab.Columns[i].ColumnName);
                    prepend = ",";
                    dbTypes[i] = ConvertToDbType(tab.Columns[i].DataType);
                }

                StringBuilder sb = new StringBuilder();
                sb.Append("INSERT INTO ");
                sb.Append(tab.TableName);
                sb.Append("(");
                sb.Append(columns);
                sb.Append(") VALUES ");


                foreach (DataRow row in tab.Rows) {
                    sb.Append("('");
                    sb.Append(row.ItemArray.Select(p => ValueToLiteral(p)).StrCat("','"));
                    sb.Append("'),");
                }

                try {
                    using (IDbTransaction tran = con.BeginTransaction()) {
                        IDbCommand cmd = CreateCommand(con);
                        cmd.CommandText = sb.Remove(sb.Length - 1, 1).ToString();

                        cmd.ExecuteNonQuery();
                        tran.Commit();
                    }
                } catch (Exception){
                    //downgrade to single log write and discard bad logs

                    foreach (DataRow row in tab.Rows) {
                        StringBuilder individualSB = new StringBuilder();
                        individualSB.Append("INSERT INTO ");
                        individualSB.Append(tab.TableName);
                        individualSB.Append("(");
                        individualSB.Append(columns);
                        individualSB.Append(") VALUES ");
                        individualSB.Append("('");
                        individualSB.Append(row.ItemArray.Select(p => ValueToLiteral(p)).StrCat("','"));
                        individualSB.Append("')");
                        try {
                            IDbCommand cmd = CreateCommand(con);
                            cmd.CommandText = individualSB.ToString();

                            cmd.ExecuteNonQuery();
                        } catch(Exception ex){
                            EventLogger.WriteError(ex.Message + Environment.NewLine + "Stack:" + Environment.NewLine + ex.StackTrace);
                        }
                    }
                }
            }
        }

        public override IDataReader ExecuteReader(IDbCommand cmd)
        {
            cmd.FixOdbcParameters(true);
            return new SnowflakeDataReader((SnowflakeDbDataReader)base.ExecuteReader(cmd));
        }

        public override int ExecuteNonQuery(IDbCommand cmd)
        {
            cmd.FixOdbcParameters(false);
            return base.ExecuteNonQuery(cmd);
        }

        public override object ExecuteScalar(IDbCommand cmd)
        {
            cmd.FixOdbcParameters(false);
            return base.ExecuteScalar(cmd);
        }

        private string ValueToLiteral(object obj)
        {
            if (obj is DateTime)
            {
                return ((DateTime)obj).ToString("yyyy-MM-dd HH:mm:ss");
            }
            else if (obj is bool)
            {
                return ((bool)obj) ? "1" : "0";
            }
            else return DatabaseServices.DMLService.EscapeTextValue(obj.ToString());
        }
    }
}
